// <auto-generated />

#nullable disable

namespace Hyperar.HPA.Infrastructure.Migrations
{
    using System;
    using Infrastructure.DataAccess;
    using Microsoft.EntityFrameworkCore;
    using Microsoft.EntityFrameworkCore.Infrastructure;
    using Microsoft.EntityFrameworkCore.Metadata;
    using Microsoft.EntityFrameworkCore.Migrations;
    using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

    [DbContext(typeof(DatabaseContext))]
    [Migration("20240220185917_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Hyperar.HPA.Domain.Country", b =>
                {
                    b.Property<long>("HattrickId")
                        .HasColumnType("bigint")
                        .HasColumnName("HattrickId")
                        .HasColumnOrder(0);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(4)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar")
                        .HasColumnName("Code")
                        .HasColumnOrder(4);

                    b.Property<string>("CurrencyName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar")
                        .HasColumnName("CurrencyName")
                        .HasColumnOrder(2);

                    b.Property<decimal>("CurrencyRate")
                        .HasPrecision(10, 5)
                        .HasColumnType("decimal")
                        .HasColumnName("CurrencyRate")
                        .HasColumnOrder(3);

                    b.Property<string>("DateFormat")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar")
                        .HasColumnName("DateFormat")
                        .HasColumnOrder(5);

                    b.Property<long>("LeagueHattrickId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar")
                        .HasColumnName("Name")
                        .HasColumnOrder(1);

                    b.Property<string>("TimeFormat")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar")
                        .HasColumnName("TimeFormat")
                        .HasColumnOrder(6);

                    b.HasKey("HattrickId");

                    b.HasIndex("LeagueHattrickId")
                        .IsUnique();

                    b.ToTable("Country", "global");
                });

            modelBuilder.Entity("Hyperar.HPA.Domain.League", b =>
                {
                    b.Property<long>("HattrickId")
                        .HasColumnType("bigint")
                        .HasColumnName("HattrickId")
                        .HasColumnOrder(0);

                    b.Property<long>("ActiveTeams")
                        .HasColumnType("bigint")
                        .HasColumnName("ActiveTeams")
                        .HasColumnOrder(13);

                    b.Property<long>("ActiveUsers")
                        .HasColumnType("bigint")
                        .HasColumnName("ActiveUsers")
                        .HasColumnOrder(14);

                    b.Property<string>("Continent")
                        .IsRequired()
                        .HasMaxLength(256)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar")
                        .HasColumnName("Continent")
                        .HasColumnOrder(4);

                    b.Property<string>("EnglishName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar")
                        .HasColumnName("EnglishName")
                        .HasColumnOrder(3);

                    b.Property<DateTime>("FifthWeeklyUpdate")
                        .HasColumnType("datetime")
                        .HasColumnName("FifthWeeklyUpdate")
                        .HasColumnOrder(25);

                    b.Property<DateTime>("FirstWeeklyUpdate")
                        .HasColumnType("datetime")
                        .HasColumnName("FirstWeeklyUpdate")
                        .HasColumnOrder(21);

                    b.Property<byte[]>("FlagBytes")
                        .IsRequired()
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("FlagBytes")
                        .HasColumnOrder(26);

                    b.Property<DateTime>("FourthWeeklyUpdate")
                        .HasColumnType("datetime")
                        .HasColumnName("FourthWeeklyUpdate")
                        .HasColumnOrder(24);

                    b.Property<long>("JuniorNationalTeamId")
                        .HasColumnType("bigint")
                        .HasColumnName("JuniorNationalTeamId")
                        .HasColumnOrder(12);

                    b.Property<long>("LanguageId")
                        .HasColumnType("bigint")
                        .HasColumnName("LanguageId")
                        .HasColumnOrder(9);

                    b.Property<string>("LanguageName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar")
                        .HasColumnName("LanguageName")
                        .HasColumnOrder(10);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar")
                        .HasColumnName("Name")
                        .HasColumnOrder(1);

                    b.Property<long>("NationalTeamId")
                        .HasColumnType("bigint")
                        .HasColumnName("NationalTeamId")
                        .HasColumnOrder(11);

                    b.Property<DateTime>("NextCupMatchDate")
                        .HasColumnType("datetime")
                        .HasColumnName("NextCupMatchDate")
                        .HasColumnOrder(19);

                    b.Property<DateTime>("NextEconomyUpdate")
                        .HasColumnType("datetime")
                        .HasColumnName("NextEconomyUpdate")
                        .HasColumnOrder(18);

                    b.Property<DateTime>("NextSeriesMatchDate")
                        .HasColumnType("datetime")
                        .HasColumnName("NextSeriesMatchDate")
                        .HasColumnOrder(20);

                    b.Property<DateTime>("NextTrainingUpdate")
                        .HasColumnType("datetime")
                        .HasColumnName("NextTrainingUpdate")
                        .HasColumnOrder(17);

                    b.Property<long>("NumberOfLevels")
                        .HasColumnType("bigint")
                        .HasColumnName("NumberOfLevels")
                        .HasColumnOrder(16);

                    b.Property<long>("Season")
                        .HasColumnType("bigint")
                        .HasColumnName("Season")
                        .HasColumnOrder(6);

                    b.Property<int>("SeasonOffset")
                        .HasColumnType("int")
                        .HasColumnName("SeasonOffset")
                        .HasColumnOrder(8);

                    b.Property<DateTime>("SecondWeeklyUpdate")
                        .HasColumnType("datetime")
                        .HasColumnName("SecondWeeklyUpdate")
                        .HasColumnOrder(22);

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar")
                        .HasColumnName("ShortName")
                        .HasColumnOrder(2);

                    b.Property<DateTime>("ThirdWeeklyUpdate")
                        .HasColumnType("datetime")
                        .HasColumnName("ThirdWeeklyUpdate")
                        .HasColumnOrder(23);

                    b.Property<long>("WaitingUsers")
                        .HasColumnType("bigint")
                        .HasColumnName("WaitingUsers")
                        .HasColumnOrder(15);

                    b.Property<long>("Week")
                        .HasColumnType("bigint")
                        .HasColumnName("Week")
                        .HasColumnOrder(7);

                    b.Property<string>("Zone")
                        .IsRequired()
                        .HasMaxLength(256)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar")
                        .HasColumnName("Zone")
                        .HasColumnOrder(5);

                    b.HasKey("HattrickId");

                    b.ToTable("League", "global");
                });

            modelBuilder.Entity("Hyperar.HPA.Domain.LeagueCup", b =>
                {
                    b.Property<long>("HattrickId")
                        .HasColumnType("bigint")
                        .HasColumnName("HattrickId")
                        .HasColumnOrder(0);

                    b.Property<int>("CurrentRound")
                        .HasColumnType("int")
                        .HasColumnName("CurrentRound")
                        .HasColumnOrder(5);

                    b.Property<long>("LeagueHattrickId")
                        .HasColumnType("bigint");

                    b.Property<long>("LeagueLevel")
                        .HasColumnType("bigint")
                        .HasColumnName("LeagueLevel")
                        .HasColumnOrder(2);

                    b.Property<long>("Level")
                        .HasColumnType("bigint")
                        .HasColumnName("Level")
                        .HasColumnOrder(3);

                    b.Property<long>("LevelIndex")
                        .HasColumnType("bigint")
                        .HasColumnName("LevelIndex")
                        .HasColumnOrder(4);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar")
                        .HasColumnName("Name")
                        .HasColumnOrder(1);

                    b.Property<long>("RoundsLeft")
                        .HasColumnType("bigint")
                        .HasColumnName("RoundsLeft")
                        .HasColumnOrder(6);

                    b.HasKey("HattrickId");

                    b.HasIndex("LeagueHattrickId");

                    b.ToTable("LeagueCup", "global");
                });

            modelBuilder.Entity("Hyperar.HPA.Domain.Manager", b =>
                {
                    b.Property<long>("HattrickId")
                        .HasColumnType("bigint")
                        .HasColumnName("HattrickId")
                        .HasColumnOrder(0);

                    b.Property<byte[]>("AvatarBytes")
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("AvatarBytes")
                        .HasColumnOrder(5);

                    b.Property<long>("CountryHattrickId")
                        .HasColumnType("bigint");

                    b.Property<string>("CurrencyName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar")
                        .HasColumnName("CurrencyName")
                        .HasColumnOrder(3);

                    b.Property<decimal>("CurrencyRate")
                        .HasPrecision(10, 5)
                        .HasColumnType("decimal")
                        .HasColumnName("CurrencyRate")
                        .HasColumnOrder(4);

                    b.Property<long>("SupporterTier")
                        .HasColumnType("bigint")
                        .HasColumnName("SupporterTier")
                        .HasColumnOrder(2);

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar")
                        .HasColumnName("UserName")
                        .HasColumnOrder(1);

                    b.HasKey("HattrickId");

                    b.HasIndex("CountryHattrickId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Manager", "global");
                });

            modelBuilder.Entity("Hyperar.HPA.Domain.ManagerAvatarLayer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar")
                        .HasColumnName("ImageUrl")
                        .HasColumnOrder(4);

                    b.Property<long>("Index")
                        .HasColumnType("bigint")
                        .HasColumnName("Index")
                        .HasColumnOrder(1);

                    b.Property<long>("ManagerHattrickId")
                        .HasColumnType("bigint");

                    b.Property<long>("XCoordinate")
                        .HasColumnType("bigint")
                        .HasColumnName("XCoordinate")
                        .HasColumnOrder(2);

                    b.Property<long>("YCoordinate")
                        .HasColumnType("bigint")
                        .HasColumnName("YCoordinate")
                        .HasColumnOrder(3);

                    b.HasKey("Id");

                    b.HasIndex("ManagerHattrickId");

                    b.ToTable("ManagerAvatarLayer", "global");
                });

            modelBuilder.Entity("Hyperar.HPA.Domain.Region", b =>
                {
                    b.Property<long>("HattrickId")
                        .HasColumnType("bigint")
                        .HasColumnName("HattrickId")
                        .HasColumnOrder(0);

                    b.Property<long>("CountryHattrickId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar")
                        .HasColumnName("Name")
                        .HasColumnOrder(1);

                    b.HasKey("HattrickId");

                    b.HasIndex("CountryHattrickId");

                    b.ToTable("Region", "global");
                });

            modelBuilder.Entity("Hyperar.HPA.Domain.Senior.HallOfFamePlayer", b =>
                {
                    b.Property<long>("HattrickId")
                        .HasColumnType("bigint")
                        .HasColumnName("HattrickId")
                        .HasColumnOrder(0);

                    b.Property<long>("Age")
                        .HasColumnType("bigint")
                        .HasColumnName("Age")
                        .HasColumnOrder(4);

                    b.Property<long>("CountryHattrickId")
                        .HasColumnType("bigint");

                    b.Property<byte>("ExpertType")
                        .HasColumnType("tinyint")
                        .HasColumnName("ExpertType")
                        .HasColumnOrder(8);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar")
                        .HasColumnName("FirstName")
                        .HasColumnOrder(1);

                    b.Property<DateTime>("IntroducedToHallOfFameOn")
                        .HasColumnType("datetime")
                        .HasColumnName("IntroducedToHallOfFameOn")
                        .HasColumnOrder(7);

                    b.Property<DateTime>("JoinedTeamOn")
                        .HasColumnType("datetime")
                        .HasColumnName("JoinedTeamOn")
                        .HasColumnOrder(5);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar")
                        .HasColumnName("LastName")
                        .HasColumnOrder(3);

                    b.Property<DateTime>("NextBirthday")
                        .HasColumnType("datetime")
                        .HasColumnName("NextBirthday")
                        .HasColumnOrder(6);

                    b.Property<string>("NickName")
                        .HasMaxLength(256)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar")
                        .HasColumnName("NickName")
                        .HasColumnOrder(2);

                    b.HasKey("HattrickId");

                    b.HasIndex("CountryHattrickId");

                    b.ToTable("HallOfFamePlayer", "senior");
                });

            modelBuilder.Entity("Hyperar.HPA.Domain.Senior.Match", b =>
                {
                    b.Property<long>("HattrickId")
                        .HasColumnType("bigint")
                        .HasColumnName("HattrickId")
                        .HasColumnOrder(0);

                    b.Property<long?>("AddedMinutes")
                        .HasColumnType("bigint")
                        .HasColumnName("AddedMinutes")
                        .HasColumnOrder(9);

                    b.Property<long>("AwayTeamHattrickId")
                        .HasColumnType("bigint")
                        .HasColumnName("AwayTeamHattrickId")
                        .HasColumnOrder(6);

                    b.Property<long?>("CompetitionId")
                        .HasColumnType("bigint")
                        .HasColumnName("CompetitionId")
                        .HasColumnOrder(3);

                    b.Property<DateTime?>("FinishDate")
                        .HasColumnType("datetime")
                        .HasColumnName("FinishDate")
                        .HasColumnOrder(8);

                    b.Property<long>("HomeTeamHattrickId")
                        .HasColumnType("bigint")
                        .HasColumnName("HomeTeamHattrickId")
                        .HasColumnOrder(5);

                    b.Property<byte>("Rules")
                        .HasColumnType("tinyint")
                        .HasColumnName("Rules")
                        .HasColumnOrder(4);

                    b.Property<string>("SourceSystem")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar")
                        .HasColumnName("SourceSystem")
                        .HasColumnOrder(1);

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime")
                        .HasColumnName("StartDate")
                        .HasColumnOrder(7);

                    b.Property<long>("TeamHattrickId")
                        .HasColumnType("bigint");

                    b.Property<byte>("Type")
                        .HasColumnType("tinyint")
                        .HasColumnName("Type")
                        .HasColumnOrder(2);

                    b.Property<byte?>("Weather")
                        .HasColumnType("tinyint")
                        .HasColumnName("Weather")
                        .HasColumnOrder(10);

                    b.HasKey("HattrickId");

                    b.HasIndex("TeamHattrickId");

                    b.ToTable("Match", "senior");
                });

            modelBuilder.Entity("Hyperar.HPA.Domain.Senior.MatchArena", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<long?>("Attendance")
                        .HasColumnType("bigint")
                        .HasColumnName("Attendance")
                        .HasColumnOrder(3);

                    b.Property<long?>("BasicSeatsSold")
                        .HasColumnType("bigint")
                        .HasColumnName("BasicSeatsSold")
                        .HasColumnOrder(5);

                    b.Property<long>("HattrickId")
                        .HasColumnType("bigint")
                        .HasColumnName("HattrickId")
                        .HasColumnOrder(1);

                    b.Property<long>("MatchHattrickId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar")
                        .HasColumnName("Name")
                        .HasColumnOrder(2);

                    b.Property<long?>("RoofSeatsSold")
                        .HasColumnType("bigint")
                        .HasColumnName("RoofSeatsSold")
                        .HasColumnOrder(6);

                    b.Property<long?>("TerracesSold")
                        .HasColumnType("bigint")
                        .HasColumnName("TerracesSold")
                        .HasColumnOrder(4);

                    b.Property<long?>("VipSeatsSold")
                        .HasColumnType("bigint")
                        .HasColumnName("VipSeatsSold")
                        .HasColumnOrder(7);

                    b.HasKey("Id");

                    b.HasIndex("MatchHattrickId")
                        .IsUnique();

                    b.ToTable("MatchArena", "senior");
                });

            modelBuilder.Entity("Hyperar.HPA.Domain.Senior.MatchEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<long?>("AdditionalPlayerHattrickId")
                        .HasColumnType("bigint")
                        .HasColumnName("AdditionalPlayerHattrickId")
                        .HasColumnOrder(3);

                    b.Property<long>("Index")
                        .HasColumnType("bigint")
                        .HasColumnName("Index")
                        .HasColumnOrder(1);

                    b.Property<long>("MatchHattrickId")
                        .HasColumnType("bigint");

                    b.Property<byte>("MatchPart")
                        .HasColumnType("tinyint")
                        .HasColumnName("MatchPart")
                        .HasColumnOrder(9);

                    b.Property<long>("Minute")
                        .HasColumnType("bigint")
                        .HasColumnName("Minute")
                        .HasColumnOrder(8);

                    b.Property<long?>("PlayerHattrickId")
                        .HasColumnType("bigint")
                        .HasColumnName("PlayerHattrickId")
                        .HasColumnOrder(2);

                    b.Property<long?>("TeamHattrickId")
                        .HasColumnType("bigint")
                        .HasColumnName("TeamHattrickId")
                        .HasColumnOrder(4);

                    b.Property<string>("Text")
                        .HasMaxLength(8000)
                        .HasColumnType("ntext")
                        .HasColumnName("Text")
                        .HasColumnOrder(7);

                    b.Property<long>("Type")
                        .HasColumnType("bigint")
                        .HasColumnName("Type")
                        .HasColumnOrder(5);

                    b.Property<long>("Variation")
                        .HasColumnType("bigint")
                        .HasColumnName("Variation")
                        .HasColumnOrder(6);

                    b.HasKey("Id");

                    b.HasIndex("MatchHattrickId");

                    b.ToTable("MatchEvent", "senior");
                });

            modelBuilder.Entity("Hyperar.HPA.Domain.Senior.MatchOfficial", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<long>("CountryHattrickId")
                        .HasColumnType("bigint");

                    b.Property<long>("HattrickId")
                        .HasColumnType("bigint")
                        .HasColumnName("HattrickId")
                        .HasColumnOrder(1);

                    b.Property<long>("MatchHattrickId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar")
                        .HasColumnName("Name")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("CountryHattrickId");

                    b.HasIndex("MatchHattrickId");

                    b.ToTable("MatchOfficial", "senior");
                });

            modelBuilder.Entity("Hyperar.HPA.Domain.Senior.MatchTeam", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<byte?>("AttackIndirectSetPiecesRating")
                        .HasColumnType("tinyint")
                        .HasColumnName("AttackIndirectSetPiecesRating")
                        .HasColumnOrder(17);

                    b.Property<short?>("Attitude")
                        .HasColumnType("smallint")
                        .HasColumnName("Attitude")
                        .HasColumnOrder(18);

                    b.Property<byte?>("CentralAttackRating")
                        .HasColumnType("tinyint")
                        .HasColumnName("CentralAttackRating")
                        .HasColumnOrder(14);

                    b.Property<byte?>("CentralDefenseRating")
                        .HasColumnType("tinyint")
                        .HasColumnName("CentralDefenseRating")
                        .HasColumnOrder(11);

                    b.Property<long?>("ChancesOnCenter")
                        .HasColumnType("bigint")
                        .HasColumnName("ChancesOnCenter")
                        .HasColumnOrder(20);

                    b.Property<long?>("ChancesOnLeft")
                        .HasColumnType("bigint")
                        .HasColumnName("ChancesOnLeft")
                        .HasColumnOrder(21);

                    b.Property<long?>("ChancesOnRight")
                        .HasColumnType("bigint")
                        .HasColumnName("ChancesOnRight")
                        .HasColumnOrder(19);

                    b.Property<byte?>("DefenseIndirectSetPiecesRating")
                        .HasColumnType("tinyint")
                        .HasColumnName("DefenseIndirectSetPiecesRating")
                        .HasColumnOrder(16);

                    b.Property<long?>("FirstHalfPosession")
                        .HasColumnType("bigint")
                        .HasColumnName("FirstHalfPosession")
                        .HasColumnOrder(24);

                    b.Property<string>("Formation")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar")
                        .HasColumnName("Formation")
                        .HasColumnOrder(5);

                    b.Property<long>("HattrickId")
                        .HasColumnType("bigint")
                        .HasColumnName("HattrickId")
                        .HasColumnOrder(1);

                    b.Property<byte?>("LeftAttackRating")
                        .HasColumnType("tinyint")
                        .HasColumnName("LeftAttackRating")
                        .HasColumnOrder(15);

                    b.Property<byte?>("LeftDefenseRating")
                        .HasColumnType("tinyint")
                        .HasColumnName("LeftDefenseRating")
                        .HasColumnOrder(12);

                    b.Property<long>("MatchHattrickId")
                        .HasColumnType("bigint");

                    b.Property<byte[]>("MatchKitBytes")
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("MatchKitBytes")
                        .HasColumnOrder(4);

                    b.Property<string>("MatchKitUrl")
                        .HasMaxLength(1024)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar")
                        .HasColumnName("MatchKitUrl")
                        .HasColumnOrder(3);

                    b.Property<byte?>("MidfieldRating")
                        .HasColumnType("tinyint")
                        .HasColumnName("MidfieldRating")
                        .HasColumnOrder(9);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar")
                        .HasColumnName("Name")
                        .HasColumnOrder(2);

                    b.Property<long?>("OtherChances")
                        .HasColumnType("bigint")
                        .HasColumnName("OtherChances")
                        .HasColumnOrder(23);

                    b.Property<byte?>("RightAttackRating")
                        .HasColumnType("tinyint")
                        .HasColumnName("RightAttackRating")
                        .HasColumnOrder(13);

                    b.Property<byte?>("RightDefenseRating")
                        .HasColumnType("tinyint")
                        .HasColumnName("RightDefenseRating")
                        .HasColumnOrder(10);

                    b.Property<long?>("Score")
                        .HasColumnType("bigint")
                        .HasColumnName("Score")
                        .HasColumnOrder(6);

                    b.Property<long?>("SecondHalfPosession")
                        .HasColumnType("bigint")
                        .HasColumnName("SecondHalfPosession")
                        .HasColumnOrder(25);

                    b.Property<long?>("SpecialEventChances")
                        .HasColumnType("bigint")
                        .HasColumnName("SpecialEventChances")
                        .HasColumnOrder(22);

                    b.Property<byte?>("TacticLevel")
                        .HasColumnType("tinyint")
                        .HasColumnName("TacticLevel")
                        .HasColumnOrder(8);

                    b.Property<byte?>("TacticType")
                        .HasColumnType("tinyint")
                        .HasColumnName("TacticType")
                        .HasColumnOrder(7);

                    b.HasKey("Id");

                    b.HasIndex("MatchHattrickId");

                    b.ToTable("MatchTeam", "senior");
                });

            modelBuilder.Entity("Hyperar.HPA.Domain.Senior.MatchTeamBooking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<long>("Index")
                        .HasColumnType("bigint")
                        .HasColumnName("Index")
                        .HasColumnOrder(1);

                    b.Property<byte>("MatchPart")
                        .HasColumnType("tinyint")
                        .HasColumnName("MatchPart")
                        .HasColumnOrder(6);

                    b.Property<long>("Minute")
                        .HasColumnType("bigint")
                        .HasColumnName("Minute")
                        .HasColumnOrder(5);

                    b.Property<long>("PlayerHattrickId")
                        .HasColumnType("bigint")
                        .HasColumnName("PlayerHattrickId")
                        .HasColumnOrder(2);

                    b.Property<string>("PlayerName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar")
                        .HasColumnName("PlayerName")
                        .HasColumnOrder(3);

                    b.Property<int>("TeamId")
                        .HasColumnType("int");

                    b.Property<byte>("Type")
                        .HasColumnType("tinyint")
                        .HasColumnName("Type")
                        .HasColumnOrder(4);

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.ToTable("MatchTeamBooking", "senior");
                });

            modelBuilder.Entity("Hyperar.HPA.Domain.Senior.MatchTeamGoal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<long>("AwayTeamScore")
                        .HasColumnType("bigint")
                        .HasColumnName("AwayTeamScore")
                        .HasColumnOrder(5);

                    b.Property<long>("HomeTeamScore")
                        .HasColumnType("bigint")
                        .HasColumnName("HomeTeamScore")
                        .HasColumnOrder(4);

                    b.Property<long>("Index")
                        .HasColumnType("bigint")
                        .HasColumnName("Index")
                        .HasColumnOrder(1);

                    b.Property<byte>("MatchPart")
                        .HasColumnType("tinyint")
                        .HasColumnName("MatchPart")
                        .HasColumnOrder(7);

                    b.Property<long>("Minute")
                        .HasColumnType("bigint")
                        .HasColumnName("Minute")
                        .HasColumnOrder(6);

                    b.Property<long>("PlayerHattrickId")
                        .HasColumnType("bigint")
                        .HasColumnName("PlayerHattrickId")
                        .HasColumnOrder(2);

                    b.Property<string>("PlayerName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar")
                        .HasColumnName("PlayerName")
                        .HasColumnOrder(3);

                    b.Property<int>("TeamId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.ToTable("MatchTeamGoal", "senior");
                });

            modelBuilder.Entity("Hyperar.HPA.Domain.Senior.MatchTeamInjury", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<long>("Index")
                        .HasColumnType("bigint")
                        .HasColumnName("Index")
                        .HasColumnOrder(1);

                    b.Property<byte>("MatchPart")
                        .HasColumnType("tinyint")
                        .HasColumnName("MatchPart")
                        .HasColumnOrder(6);

                    b.Property<long>("Minute")
                        .HasColumnType("bigint")
                        .HasColumnName("Minute")
                        .HasColumnOrder(5);

                    b.Property<long>("PlayerHattrickId")
                        .HasColumnType("bigint")
                        .HasColumnName("PlayerHattrickId")
                        .HasColumnOrder(2);

                    b.Property<string>("PlayerName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar")
                        .HasColumnName("PlayerName")
                        .HasColumnOrder(3);

                    b.Property<int>("TeamId")
                        .HasColumnType("int");

                    b.Property<byte>("Type")
                        .HasColumnType("tinyint")
                        .HasColumnName("Type")
                        .HasColumnOrder(4);

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.ToTable("MatchTeamInjury", "senior");
                });

            modelBuilder.Entity("Hyperar.HPA.Domain.Senior.MatchTeamLineUp", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<byte>("Experience")
                        .HasColumnType("tinyint")
                        .HasColumnName("Experience")
                        .HasColumnOrder(1);

                    b.Property<int>("Style")
                        .HasColumnType("int")
                        .HasColumnName("Style")
                        .HasColumnOrder(2);

                    b.Property<int>("TeamId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TeamId")
                        .IsUnique();

                    b.ToTable("MatchTeamLineUp", "senior");
                });

            modelBuilder.Entity("Hyperar.HPA.Domain.Senior.MatchTeamLineUpPlayer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<short?>("Behavior")
                        .HasColumnType("smallint")
                        .HasColumnName("Behavior")
                        .HasColumnOrder(6);

                    b.Property<decimal?>("EndRating")
                        .HasColumnType("decimal")
                        .HasColumnName("EndRating")
                        .HasColumnOrder(8);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar")
                        .HasColumnName("FirstName")
                        .HasColumnOrder(2);

                    b.Property<long>("HattrickId")
                        .HasColumnType("bigint")
                        .HasColumnName("HattrickId")
                        .HasColumnOrder(1);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar")
                        .HasColumnName("LastName")
                        .HasColumnOrder(4);

                    b.Property<int>("LineUpId")
                        .HasColumnType("int");

                    b.Property<string>("NickName")
                        .HasMaxLength(256)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar")
                        .HasColumnName("NickName")
                        .HasColumnOrder(3);

                    b.Property<decimal?>("Rating")
                        .HasColumnType("decimal")
                        .HasColumnName("Rating")
                        .HasColumnOrder(7);

                    b.Property<short>("Role")
                        .HasColumnType("smallint")
                        .HasColumnName("Role")
                        .HasColumnOrder(5);

                    b.HasKey("Id");

                    b.HasIndex("LineUpId");

                    b.ToTable("MatchTeamLineUpPlayer", "senior");
                });

            modelBuilder.Entity("Hyperar.HPA.Domain.Senior.MatchTeamLineUpStartingPlayer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<short?>("Behavior")
                        .HasColumnType("smallint")
                        .HasColumnName("Behavior")
                        .HasColumnOrder(6);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar")
                        .HasColumnName("FirstName")
                        .HasColumnOrder(2);

                    b.Property<long>("HattrickId")
                        .HasColumnType("bigint")
                        .HasColumnName("HattrickId")
                        .HasColumnOrder(1);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar")
                        .HasColumnName("LastName")
                        .HasColumnOrder(4);

                    b.Property<int>("LineUpId")
                        .HasColumnType("int");

                    b.Property<string>("NickName")
                        .HasMaxLength(256)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar")
                        .HasColumnName("NickName")
                        .HasColumnOrder(3);

                    b.Property<short>("Role")
                        .HasColumnType("smallint")
                        .HasColumnName("Role")
                        .HasColumnOrder(5);

                    b.Property<int?>("SubstitutionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LineUpId");

                    b.HasIndex("SubstitutionId");

                    b.ToTable("MatchTeamLineUpStartingPlayer", "senior");
                });

            modelBuilder.Entity("Hyperar.HPA.Domain.Senior.MatchTeamLineUpSubstitution", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<long>("InPlayerHattrickId")
                        .HasColumnType("bigint");

                    b.Property<int>("LineUpId")
                        .HasColumnType("int");

                    b.Property<byte>("MatchPart")
                        .HasColumnType("tinyint")
                        .HasColumnName("MatchPart")
                        .HasColumnOrder(5);

                    b.Property<long>("Minute")
                        .HasColumnType("bigint")
                        .HasColumnName("Minute")
                        .HasColumnOrder(4);

                    b.Property<short>("NewRole")
                        .HasColumnType("smallint")
                        .HasColumnName("NewRole")
                        .HasColumnOrder(2);

                    b.Property<short>("NewRoleBehavior")
                        .HasColumnType("smallint")
                        .HasColumnName("NewRoleBehavior")
                        .HasColumnOrder(3);

                    b.Property<byte>("OrderType")
                        .HasColumnType("tinyint")
                        .HasColumnName("OrderType")
                        .HasColumnOrder(1);

                    b.Property<long>("OutPlayerHattrickId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("LineUpId");

                    b.ToTable("MatchTeamLineUpSubstitution", "senior");
                });

            modelBuilder.Entity("Hyperar.HPA.Domain.Senior.Player", b =>
                {
                    b.Property<long>("HattrickId")
                        .HasColumnType("bigint")
                        .HasColumnName("HattrickId")
                        .HasColumnOrder(0);

                    b.Property<long>("AgeDays")
                        .HasColumnType("bigint")
                        .HasColumnName("AgeDays")
                        .HasColumnOrder(7);

                    b.Property<long>("AgeYears")
                        .HasColumnType("bigint")
                        .HasColumnName("AgeYears")
                        .HasColumnOrder(6);

                    b.Property<byte>("Aggressiveness")
                        .HasColumnType("tinyint")
                        .HasColumnName("Aggressiveness")
                        .HasColumnOrder(16);

                    b.Property<byte>("Agreeability")
                        .HasColumnType("tinyint")
                        .HasColumnName("Agreeability")
                        .HasColumnOrder(15);

                    b.Property<byte[]>("AvatarBytes")
                        .IsRequired()
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("AvatarBytes")
                        .HasColumnOrder(34);

                    b.Property<byte>("BookingStatus")
                        .HasColumnType("tinyint")
                        .HasColumnName("BookingStatus")
                        .HasColumnOrder(31);

                    b.Property<long>("CareerGoals")
                        .HasColumnType("bigint")
                        .HasColumnName("CareerGoals")
                        .HasColumnOrder(25);

                    b.Property<long>("CareerHattricks")
                        .HasColumnType("bigint")
                        .HasColumnName("CareerHattricks")
                        .HasColumnOrder(26);

                    b.Property<byte>("Category")
                        .HasColumnType("tinyint")
                        .HasColumnName("Category")
                        .HasColumnOrder(33);

                    b.Property<long>("CountryHattrickId")
                        .HasColumnType("bigint");

                    b.Property<long>("CurrentSeasonCupGoals")
                        .HasColumnType("bigint")
                        .HasColumnName("CurrentSeasonCupGoals")
                        .HasColumnOrder(23);

                    b.Property<long>("CurrentSeasonFriendlyGoals")
                        .HasColumnType("bigint")
                        .HasColumnName("CurrentSeasonFriendlyGoals")
                        .HasColumnOrder(24);

                    b.Property<long>("CurrentSeasonLeagueGoals")
                        .HasColumnType("bigint")
                        .HasColumnName("CurrentSeasonLeagueGoals")
                        .HasColumnOrder(22);

                    b.Property<bool>("EnrolledOnNationalTeam")
                        .HasColumnType("bit")
                        .HasColumnName("EnrolledOnNationalTeam")
                        .HasColumnOrder(21);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar")
                        .HasColumnName("FirstName")
                        .HasColumnOrder(1);

                    b.Property<long>("GoalsOnTeam")
                        .HasColumnType("bigint")
                        .HasColumnName("GoalsOnTeam")
                        .HasColumnOrder(27);

                    b.Property<bool>("HasMotherClubBonus")
                        .HasColumnType("bit")
                        .HasColumnName("HasMotherClubBonus")
                        .HasColumnOrder(12);

                    b.Property<int>("Health")
                        .HasColumnType("int")
                        .HasColumnName("Health")
                        .HasColumnOrder(32);

                    b.Property<byte>("Honesty")
                        .HasColumnType("tinyint")
                        .HasColumnName("Honesty")
                        .HasColumnOrder(17);

                    b.Property<bool>("IsCoach")
                        .HasColumnType("bit")
                        .HasColumnName("IsCoach")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsForeign")
                        .HasColumnType("bit")
                        .HasColumnName("IsForeign")
                        .HasColumnOrder(14);

                    b.Property<bool>("IsTransferListed")
                        .HasColumnType("bit")
                        .HasColumnName("IsTransferListed")
                        .HasColumnOrder(20);

                    b.Property<DateTime>("JoinedTeamOn")
                        .HasColumnType("datetime")
                        .HasColumnName("JoinedTeamOn")
                        .HasColumnOrder(8);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar")
                        .HasColumnName("LastName")
                        .HasColumnOrder(3);

                    b.Property<byte>("Leadership")
                        .HasColumnType("tinyint")
                        .HasColumnName("Leadership")
                        .HasColumnOrder(18);

                    b.Property<long>("MatchesOnTeam")
                        .HasColumnType("bigint")
                        .HasColumnName("MatchesOnTeam")
                        .HasColumnOrder(28);

                    b.Property<long>("NationalTeamCaps")
                        .HasColumnType("bigint")
                        .HasColumnName("NationalTeamCaps")
                        .HasColumnOrder(29);

                    b.Property<string>("NickName")
                        .HasMaxLength(256)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar")
                        .HasColumnName("NickName")
                        .HasColumnOrder(2);

                    b.Property<string>("Notes")
                        .IsUnicode(true)
                        .HasColumnType("nvarchar")
                        .HasColumnName("Notes")
                        .HasColumnOrder(9);

                    b.Property<long>("Salary")
                        .HasColumnType("bigint")
                        .HasColumnName("Salary")
                        .HasColumnOrder(13);

                    b.Property<long?>("ShirtNumber")
                        .HasColumnType("bigint")
                        .HasColumnName("ShirtNumber")
                        .HasColumnOrder(4);

                    b.Property<byte>("Specialty")
                        .HasColumnType("tinyint")
                        .HasColumnName("Specialty")
                        .HasColumnOrder(19);

                    b.Property<string>("Statement")
                        .IsUnicode(true)
                        .HasColumnType("nvarchar")
                        .HasColumnName("Statement")
                        .HasColumnOrder(10);

                    b.Property<long>("TeamHattrickId")
                        .HasColumnType("bigint");

                    b.Property<long>("TotalSkillIndex")
                        .HasColumnType("bigint")
                        .HasColumnName("TotalSkillIndex")
                        .HasColumnOrder(11);

                    b.Property<long>("YouthNationalTeamCaps")
                        .HasColumnType("bigint")
                        .HasColumnName("YouthNationalTeamCaps")
                        .HasColumnOrder(30);

                    b.HasKey("HattrickId");

                    b.HasIndex("CountryHattrickId");

                    b.HasIndex("TeamHattrickId");

                    b.ToTable("Player", "senior");
                });

            modelBuilder.Entity("Hyperar.HPA.Domain.Senior.PlayerAvatarLayer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar")
                        .HasColumnName("ImageUrl")
                        .HasColumnOrder(4);

                    b.Property<long>("Index")
                        .HasColumnType("bigint")
                        .HasColumnName("Index")
                        .HasColumnOrder(1);

                    b.Property<long>("PlayerHattrickId")
                        .HasColumnType("bigint");

                    b.Property<long>("XCoordinate")
                        .HasColumnType("bigint")
                        .HasColumnName("XCoordinate")
                        .HasColumnOrder(2);

                    b.Property<long>("YCoordinate")
                        .HasColumnType("bigint")
                        .HasColumnName("YCoordinate")
                        .HasColumnOrder(3);

                    b.HasKey("Id");

                    b.HasIndex("PlayerHattrickId");

                    b.ToTable("PlayerAvatarLayer", "senior");
                });

            modelBuilder.Entity("Hyperar.HPA.Domain.Senior.PlayerSkillSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<byte>("Defending")
                        .HasColumnType("tinyint")
                        .HasColumnName("Defending")
                        .HasColumnOrder(6);

                    b.Property<byte>("Experience")
                        .HasColumnType("tinyint")
                        .HasColumnName("Experience")
                        .HasColumnOrder(13);

                    b.Property<byte>("Form")
                        .HasColumnType("tinyint")
                        .HasColumnName("Form")
                        .HasColumnOrder(3);

                    b.Property<byte>("Keeper")
                        .HasColumnType("tinyint")
                        .HasColumnName("Keeper")
                        .HasColumnOrder(5);

                    b.Property<byte>("Loyalty")
                        .HasColumnType("tinyint")
                        .HasColumnName("Loyalty")
                        .HasColumnOrder(12);

                    b.Property<byte>("Passing")
                        .HasColumnType("tinyint")
                        .HasColumnName("Passing")
                        .HasColumnOrder(9);

                    b.Property<long>("PlayerHattrickId")
                        .HasColumnType("bigint");

                    b.Property<byte>("Playmaking")
                        .HasColumnType("tinyint")
                        .HasColumnName("Playmaking")
                        .HasColumnOrder(7);

                    b.Property<byte>("Scoring")
                        .HasColumnType("tinyint")
                        .HasColumnName("Scoring")
                        .HasColumnOrder(10);

                    b.Property<long>("Season")
                        .HasColumnType("bigint")
                        .HasColumnName("Season")
                        .HasColumnOrder(1);

                    b.Property<byte>("SetPieces")
                        .HasColumnType("tinyint")
                        .HasColumnName("SetPieces")
                        .HasColumnOrder(11);

                    b.Property<byte>("Stamina")
                        .HasColumnType("tinyint")
                        .HasColumnName("Stamina")
                        .HasColumnOrder(4);

                    b.Property<long>("Week")
                        .HasColumnType("bigint")
                        .HasColumnName("Week")
                        .HasColumnOrder(2);

                    b.Property<byte>("Winger")
                        .HasColumnType("tinyint")
                        .HasColumnName("Winger")
                        .HasColumnOrder(8);

                    b.HasKey("Id");

                    b.HasIndex("PlayerHattrickId");

                    b.ToTable("PlayerSkillSet", "senior");
                });

            modelBuilder.Entity("Hyperar.HPA.Domain.Senior.StaffMember", b =>
                {
                    b.Property<long>("HattrickId")
                        .HasColumnType("bigint")
                        .HasColumnName("HattrickId")
                        .HasColumnOrder(0);

                    b.Property<byte[]>("AvatarBytes")
                        .IsRequired()
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("AvatarBytes")
                        .HasColumnOrder(6);

                    b.Property<long?>("HallOfFamePlayerId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("HiredOn")
                        .HasColumnType("datetime")
                        .HasColumnName("HiredOn")
                        .HasColumnOrder(2);

                    b.Property<long>("Level")
                        .IsUnicode(true)
                        .HasColumnType("bigint")
                        .HasColumnName("Level")
                        .HasColumnOrder(4);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar")
                        .HasColumnName("Name")
                        .HasColumnOrder(1);

                    b.Property<long>("Salary")
                        .HasColumnType("bigint")
                        .HasColumnName("Salary")
                        .HasColumnOrder(5);

                    b.Property<byte>("Type")
                        .HasColumnType("tinyint")
                        .HasColumnName("Type")
                        .HasColumnOrder(3);

                    b.HasKey("HattrickId");

                    b.HasIndex("HallOfFamePlayerId")
                        .IsUnique()
                        .HasFilter("[HallOfFamePlayerId] IS NOT NULL");

                    b.ToTable("StaffMember", "senior");
                });

            modelBuilder.Entity("Hyperar.HPA.Domain.Senior.StaffMemberAvatarLayer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar")
                        .HasColumnName("ImageUrl")
                        .HasColumnOrder(4);

                    b.Property<long>("Index")
                        .HasColumnType("bigint")
                        .HasColumnName("Index")
                        .HasColumnOrder(1);

                    b.Property<long>("StaffHattrickId")
                        .HasColumnType("bigint");

                    b.Property<long>("XCoordinate")
                        .HasColumnType("bigint")
                        .HasColumnName("XCoordinate")
                        .HasColumnOrder(2);

                    b.Property<long>("YCoordinate")
                        .HasColumnType("bigint")
                        .HasColumnName("YCoordinate")
                        .HasColumnOrder(3);

                    b.HasKey("Id");

                    b.HasIndex("StaffHattrickId");

                    b.ToTable("StaffMemberAvatarLayer", "senior");
                });

            modelBuilder.Entity("Hyperar.HPA.Domain.Senior.Team", b =>
                {
                    b.Property<long>("HattrickId")
                        .HasColumnType("bigint")
                        .HasColumnName("HattrickId")
                        .HasColumnOrder(0);

                    b.Property<byte[]>("AlternativeMatchKitBytes")
                        .IsRequired()
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("AlternativeMatchKitBytes")
                        .HasColumnOrder(22);

                    b.Property<string>("AlternativeMatchKitUrl")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar")
                        .HasColumnName("AlternativeMatchKitUrl")
                        .HasColumnOrder(19);

                    b.Property<long>("CoachPlayerId")
                        .HasColumnType("bigint")
                        .HasColumnName("CoachPlayerId")
                        .HasColumnOrder(5);

                    b.Property<DateTime>("FoundedOn")
                        .HasColumnType("datetime")
                        .HasColumnName("FoundedOn")
                        .HasColumnOrder(4);

                    b.Property<long>("GlobalRanking")
                        .HasColumnType("bigint")
                        .HasColumnName("GlobalRanking")
                        .HasColumnOrder(7);

                    b.Property<bool>("IsPlayingCup")
                        .HasColumnType("bit")
                        .HasColumnName("IsPlayingCup")
                        .HasColumnOrder(6);

                    b.Property<bool>("IsPrimary")
                        .HasColumnType("bit")
                        .HasColumnName("IsPrimary")
                        .HasColumnOrder(3);

                    b.Property<long>("LeagueHattrickId")
                        .HasColumnType("bigint");

                    b.Property<long>("LeagueRanking")
                        .HasColumnType("bigint")
                        .HasColumnName("LeagueRanking")
                        .HasColumnOrder(8);

                    b.Property<byte[]>("LogoBytes")
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("LogoBytes")
                        .HasColumnOrder(20);

                    b.Property<string>("LogoUrl")
                        .HasMaxLength(1024)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar")
                        .HasColumnName("LogoUrl")
                        .HasColumnOrder(17);

                    b.Property<long>("ManagerHattrickId")
                        .HasColumnType("bigint");

                    b.Property<byte[]>("MatchKitBytes")
                        .IsRequired()
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("MatchKitBytes")
                        .HasColumnOrder(21);

                    b.Property<string>("MatchKitUrl")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar")
                        .HasColumnName("MatchKitUrl")
                        .HasColumnOrder(18);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar")
                        .HasColumnName("Name")
                        .HasColumnOrder(1);

                    b.Property<long>("PowerRanking")
                        .HasColumnType("bigint")
                        .HasColumnName("PowerRanking")
                        .HasColumnOrder(10);

                    b.Property<long>("RegionHattrickId")
                        .HasColumnType("bigint");

                    b.Property<long>("RegionRanking")
                        .HasColumnType("bigint")
                        .HasColumnName("RegionRanking")
                        .HasColumnOrder(9);

                    b.Property<long>("SeriesDivision")
                        .HasColumnType("bigint")
                        .HasColumnName("SeriesDivision")
                        .HasColumnOrder(16);

                    b.Property<long>("SeriesHattrickId")
                        .HasColumnType("bigint")
                        .HasColumnName("SeriesHattrickId")
                        .HasColumnOrder(14);

                    b.Property<string>("SeriesName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar")
                        .HasColumnName("SeriesName")
                        .HasColumnOrder(15);

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar")
                        .HasColumnName("ShortName")
                        .HasColumnOrder(2);

                    b.Property<long>("TeamRank")
                        .HasColumnType("bigint")
                        .HasColumnName("TeamRank")
                        .HasColumnOrder(11);

                    b.Property<long>("UndefeatedStreak")
                        .HasColumnType("bigint")
                        .HasColumnName("UndefeatedStreak")
                        .HasColumnOrder(12);

                    b.Property<long>("WinStreak")
                        .HasColumnType("bigint")
                        .HasColumnName("WinStreak")
                        .HasColumnOrder(13);

                    b.HasKey("HattrickId");

                    b.HasIndex("LeagueHattrickId");

                    b.HasIndex("ManagerHattrickId");

                    b.HasIndex("RegionHattrickId");

                    b.ToTable("Team", "senior");
                });

            modelBuilder.Entity("Hyperar.HPA.Domain.Senior.TeamArena", b =>
                {
                    b.Property<long>("HattrickId")
                        .HasColumnType("bigint")
                        .HasColumnName("HattrickId")
                        .HasColumnOrder(0);

                    b.Property<long>("BasicSeatCapacity")
                        .HasColumnType("bigint")
                        .HasColumnName("BasicSeatCapacity")
                        .HasColumnOrder(4);

                    b.Property<DateTime>("BuiltOn")
                        .HasColumnType("datetime")
                        .HasColumnName("BuiltOn")
                        .HasColumnOrder(2);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar")
                        .HasColumnName("Name")
                        .HasColumnOrder(1);

                    b.Property<long>("RoofSeatCapacity")
                        .HasColumnType("bigint")
                        .HasColumnName("RoofSeatCapacity")
                        .HasColumnOrder(5);

                    b.Property<long>("TeamHattrickId")
                        .HasColumnType("bigint");

                    b.Property<long>("TerracesCapacity")
                        .HasColumnType("bigint")
                        .HasColumnName("TerracesCapacity")
                        .HasColumnOrder(3);

                    b.Property<long>("TotalCapacity")
                        .HasColumnType("bigint")
                        .HasColumnName("TotalCapacity")
                        .HasColumnOrder(7);

                    b.Property<long>("VipLoungeCapacity")
                        .HasColumnType("bigint")
                        .HasColumnName("VipLoungeCapacity")
                        .HasColumnOrder(6);

                    b.HasKey("HattrickId");

                    b.HasIndex("TeamHattrickId")
                        .IsUnique();

                    b.ToTable("TeamArena", "senior");
                });

            modelBuilder.Entity("Hyperar.HPA.Domain.Senior.TeamOverviewMatch", b =>
                {
                    b.Property<long>("HattrickId")
                        .HasColumnType("bigint")
                        .HasColumnName("HattrickId")
                        .HasColumnOrder(0);

                    b.Property<long?>("AwayGoals")
                        .HasColumnType("bigint")
                        .HasColumnName("AwayGoals")
                        .HasColumnOrder(8);

                    b.Property<long>("AwayTeamHattrickId")
                        .HasColumnType("bigint")
                        .HasColumnName("AwayTeamHattrickId")
                        .HasColumnOrder(5);

                    b.Property<string>("AwayTeamName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar")
                        .HasColumnName("AwayTeamName")
                        .HasColumnOrder(6);

                    b.Property<string>("AwayTeamShortName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar")
                        .HasColumnName("AwayTeamShortName")
                        .HasColumnOrder(7);

                    b.Property<long?>("CompetitionId")
                        .HasColumnType("bigint")
                        .HasColumnName("CompetitionId")
                        .HasColumnOrder(11);

                    b.Property<long?>("HomeGoals")
                        .HasColumnType("bigint")
                        .HasColumnName("HomeGoals")
                        .HasColumnOrder(4);

                    b.Property<long>("HomeTeamHattrickId")
                        .HasColumnType("bigint")
                        .HasColumnName("HomeTeamHattrickId")
                        .HasColumnOrder(1);

                    b.Property<string>("HomeTeamName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar")
                        .HasColumnName("HomeTeamName")
                        .HasColumnOrder(2);

                    b.Property<string>("HomeTeamShortName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar")
                        .HasColumnName("HomeTeamShortName")
                        .HasColumnOrder(3);

                    b.Property<DateTime>("StartsOn")
                        .HasColumnType("datetime")
                        .HasColumnName("StartsOn")
                        .HasColumnOrder(9);

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint")
                        .HasColumnName("Status")
                        .HasColumnOrder(12);

                    b.Property<long>("TeamHattrickId")
                        .HasColumnType("bigint");

                    b.Property<byte>("Type")
                        .HasColumnType("tinyint")
                        .HasColumnName("Type")
                        .HasColumnOrder(10);

                    b.HasKey("HattrickId");

                    b.HasIndex("TeamHattrickId");

                    b.ToTable("TeamOverviewMatch", "senior");
                });

            modelBuilder.Entity("Hyperar.HPA.Domain.Token", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime")
                        .HasColumnName("CreatedOn")
                        .HasColumnOrder(3);

                    b.Property<DateTime>("ExpiresOn")
                        .HasColumnType("datetime")
                        .HasColumnName("ExpiresOn")
                        .HasColumnOrder(4);

                    b.Property<string>("SecretValue")
                        .IsRequired()
                        .HasMaxLength(128)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar")
                        .HasColumnName("SecretValue")
                        .HasColumnOrder(2);

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(128)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar")
                        .HasColumnName("Value")
                        .HasColumnOrder(1);

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Token", (string)null);
                });

            modelBuilder.Entity("Hyperar.HPA.Domain.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("LastDownloadDate")
                        .HasColumnType("datetime")
                        .HasColumnName("LastDownloadDate")
                        .HasColumnOrder(1);

                    b.HasKey("Id");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("Hyperar.HPA.Domain.Country", b =>
                {
                    b.HasOne("Hyperar.HPA.Domain.League", "League")
                        .WithOne("Country")
                        .HasForeignKey("Hyperar.HPA.Domain.Country", "LeagueHattrickId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("League");
                });

            modelBuilder.Entity("Hyperar.HPA.Domain.LeagueCup", b =>
                {
                    b.HasOne("Hyperar.HPA.Domain.League", "League")
                        .WithMany("Cups")
                        .HasForeignKey("LeagueHattrickId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("League");
                });

            modelBuilder.Entity("Hyperar.HPA.Domain.Manager", b =>
                {
                    b.HasOne("Hyperar.HPA.Domain.Country", "Country")
                        .WithMany("Managers")
                        .HasForeignKey("CountryHattrickId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hyperar.HPA.Domain.User", "User")
                        .WithOne("Manager")
                        .HasForeignKey("Hyperar.HPA.Domain.Manager", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Hyperar.HPA.Domain.ManagerAvatarLayer", b =>
                {
                    b.HasOne("Hyperar.HPA.Domain.Manager", "Manager")
                        .WithMany("AvatarLayers")
                        .HasForeignKey("ManagerHattrickId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Manager");
                });

            modelBuilder.Entity("Hyperar.HPA.Domain.Region", b =>
                {
                    b.HasOne("Hyperar.HPA.Domain.Country", "Country")
                        .WithMany("Regions")
                        .HasForeignKey("CountryHattrickId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Hyperar.HPA.Domain.Senior.HallOfFamePlayer", b =>
                {
                    b.HasOne("Hyperar.HPA.Domain.Country", "Country")
                        .WithMany("HallOfFamePlayers")
                        .HasForeignKey("CountryHattrickId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Hyperar.HPA.Domain.Senior.Match", b =>
                {
                    b.HasOne("Hyperar.HPA.Domain.Senior.Team", "Team")
                        .WithMany("Matches")
                        .HasForeignKey("TeamHattrickId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Team");
                });

            modelBuilder.Entity("Hyperar.HPA.Domain.Senior.MatchArena", b =>
                {
                    b.HasOne("Hyperar.HPA.Domain.Senior.Match", "Match")
                        .WithOne("Arena")
                        .HasForeignKey("Hyperar.HPA.Domain.Senior.MatchArena", "MatchHattrickId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Match");
                });

            modelBuilder.Entity("Hyperar.HPA.Domain.Senior.MatchEvent", b =>
                {
                    b.HasOne("Hyperar.HPA.Domain.Senior.Match", "Match")
                        .WithMany("Events")
                        .HasForeignKey("MatchHattrickId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Match");
                });

            modelBuilder.Entity("Hyperar.HPA.Domain.Senior.MatchOfficial", b =>
                {
                    b.HasOne("Hyperar.HPA.Domain.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryHattrickId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hyperar.HPA.Domain.Senior.Match", "Match")
                        .WithMany("Officials")
                        .HasForeignKey("MatchHattrickId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Country");

                    b.Navigation("Match");
                });

            modelBuilder.Entity("Hyperar.HPA.Domain.Senior.MatchTeam", b =>
                {
                    b.HasOne("Hyperar.HPA.Domain.Senior.Match", "Match")
                        .WithMany("Teams")
                        .HasForeignKey("MatchHattrickId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Match");
                });

            modelBuilder.Entity("Hyperar.HPA.Domain.Senior.MatchTeamBooking", b =>
                {
                    b.HasOne("Hyperar.HPA.Domain.Senior.MatchTeam", "Team")
                        .WithMany("Bookings")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Team");
                });

            modelBuilder.Entity("Hyperar.HPA.Domain.Senior.MatchTeamGoal", b =>
                {
                    b.HasOne("Hyperar.HPA.Domain.Senior.MatchTeam", "Team")
                        .WithMany("Goals")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Team");
                });

            modelBuilder.Entity("Hyperar.HPA.Domain.Senior.MatchTeamInjury", b =>
                {
                    b.HasOne("Hyperar.HPA.Domain.Senior.MatchTeam", "Team")
                        .WithMany("Injuries")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Team");
                });

            modelBuilder.Entity("Hyperar.HPA.Domain.Senior.MatchTeamLineUp", b =>
                {
                    b.HasOne("Hyperar.HPA.Domain.Senior.MatchTeam", "Team")
                        .WithOne("LineUp")
                        .HasForeignKey("Hyperar.HPA.Domain.Senior.MatchTeamLineUp", "TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Team");
                });

            modelBuilder.Entity("Hyperar.HPA.Domain.Senior.MatchTeamLineUpPlayer", b =>
                {
                    b.HasOne("Hyperar.HPA.Domain.Senior.MatchTeamLineUp", "LineUp")
                        .WithMany("Players")
                        .HasForeignKey("LineUpId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("LineUp");
                });

            modelBuilder.Entity("Hyperar.HPA.Domain.Senior.MatchTeamLineUpStartingPlayer", b =>
                {
                    b.HasOne("Hyperar.HPA.Domain.Senior.MatchTeamLineUp", "LineUp")
                        .WithMany("StartingPlayers")
                        .HasForeignKey("LineUpId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Hyperar.HPA.Domain.Senior.MatchTeamLineUpSubstitution", "Substitution")
                        .WithMany()
                        .HasForeignKey("SubstitutionId");

                    b.Navigation("LineUp");

                    b.Navigation("Substitution");
                });

            modelBuilder.Entity("Hyperar.HPA.Domain.Senior.MatchTeamLineUpSubstitution", b =>
                {
                    b.HasOne("Hyperar.HPA.Domain.Senior.MatchTeamLineUp", "LineUp")
                        .WithMany("Substitutions")
                        .HasForeignKey("LineUpId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("LineUp");
                });

            modelBuilder.Entity("Hyperar.HPA.Domain.Senior.Player", b =>
                {
                    b.HasOne("Hyperar.HPA.Domain.Country", "Country")
                        .WithMany("Players")
                        .HasForeignKey("CountryHattrickId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Hyperar.HPA.Domain.Senior.Team", "Team")
                        .WithMany("Players")
                        .HasForeignKey("TeamHattrickId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Country");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("Hyperar.HPA.Domain.Senior.PlayerAvatarLayer", b =>
                {
                    b.HasOne("Hyperar.HPA.Domain.Senior.Player", "Player")
                        .WithMany("AvatarLayers")
                        .HasForeignKey("PlayerHattrickId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");
                });

            modelBuilder.Entity("Hyperar.HPA.Domain.Senior.PlayerSkillSet", b =>
                {
                    b.HasOne("Hyperar.HPA.Domain.Senior.Player", "Player")
                        .WithMany("PlayerSkillSets")
                        .HasForeignKey("PlayerHattrickId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");
                });

            modelBuilder.Entity("Hyperar.HPA.Domain.Senior.StaffMember", b =>
                {
                    b.HasOne("Hyperar.HPA.Domain.Senior.HallOfFamePlayer", "HallOfFamePlayer")
                        .WithOne("Staff")
                        .HasForeignKey("Hyperar.HPA.Domain.Senior.StaffMember", "HallOfFamePlayerId");

                    b.Navigation("HallOfFamePlayer");
                });

            modelBuilder.Entity("Hyperar.HPA.Domain.Senior.StaffMemberAvatarLayer", b =>
                {
                    b.HasOne("Hyperar.HPA.Domain.Senior.StaffMember", "Staff")
                        .WithMany("AvatarLayers")
                        .HasForeignKey("StaffHattrickId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("Hyperar.HPA.Domain.Senior.Team", b =>
                {
                    b.HasOne("Hyperar.HPA.Domain.League", "League")
                        .WithMany("Teams")
                        .HasForeignKey("LeagueHattrickId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Hyperar.HPA.Domain.Manager", "Manager")
                        .WithMany("Teams")
                        .HasForeignKey("ManagerHattrickId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Hyperar.HPA.Domain.Region", "Region")
                        .WithMany("Teams")
                        .HasForeignKey("RegionHattrickId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("League");

                    b.Navigation("Manager");

                    b.Navigation("Region");
                });

            modelBuilder.Entity("Hyperar.HPA.Domain.Senior.TeamArena", b =>
                {
                    b.HasOne("Hyperar.HPA.Domain.Senior.Team", "Team")
                        .WithOne("TeamArena")
                        .HasForeignKey("Hyperar.HPA.Domain.Senior.TeamArena", "TeamHattrickId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Team");
                });

            modelBuilder.Entity("Hyperar.HPA.Domain.Senior.TeamOverviewMatch", b =>
                {
                    b.HasOne("Hyperar.HPA.Domain.Senior.Team", "Team")
                        .WithMany("OverviewMatches")
                        .HasForeignKey("TeamHattrickId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Team");
                });

            modelBuilder.Entity("Hyperar.HPA.Domain.Token", b =>
                {
                    b.HasOne("Hyperar.HPA.Domain.User", "User")
                        .WithOne("Token")
                        .HasForeignKey("Hyperar.HPA.Domain.Token", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Hyperar.HPA.Domain.Country", b =>
                {
                    b.Navigation("HallOfFamePlayers");

                    b.Navigation("Managers");

                    b.Navigation("Players");

                    b.Navigation("Regions");
                });

            modelBuilder.Entity("Hyperar.HPA.Domain.League", b =>
                {
                    b.Navigation("Country");

                    b.Navigation("Cups");

                    b.Navigation("Teams");
                });

            modelBuilder.Entity("Hyperar.HPA.Domain.Manager", b =>
                {
                    b.Navigation("AvatarLayers");

                    b.Navigation("Teams");
                });

            modelBuilder.Entity("Hyperar.HPA.Domain.Region", b =>
                {
                    b.Navigation("Teams");
                });

            modelBuilder.Entity("Hyperar.HPA.Domain.Senior.HallOfFamePlayer", b =>
                {
                    b.Navigation("Staff");
                });

            modelBuilder.Entity("Hyperar.HPA.Domain.Senior.Match", b =>
                {
                    b.Navigation("Arena");

                    b.Navigation("Events");

                    b.Navigation("Officials");

                    b.Navigation("Teams");
                });

            modelBuilder.Entity("Hyperar.HPA.Domain.Senior.MatchTeam", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("Goals");

                    b.Navigation("Injuries");

                    b.Navigation("LineUp");
                });

            modelBuilder.Entity("Hyperar.HPA.Domain.Senior.MatchTeamLineUp", b =>
                {
                    b.Navigation("Players");

                    b.Navigation("StartingPlayers");

                    b.Navigation("Substitutions");
                });

            modelBuilder.Entity("Hyperar.HPA.Domain.Senior.Player", b =>
                {
                    b.Navigation("AvatarLayers");

                    b.Navigation("PlayerSkillSets");
                });

            modelBuilder.Entity("Hyperar.HPA.Domain.Senior.StaffMember", b =>
                {
                    b.Navigation("AvatarLayers");
                });

            modelBuilder.Entity("Hyperar.HPA.Domain.Senior.Team", b =>
                {
                    b.Navigation("Matches");

                    b.Navigation("OverviewMatches");

                    b.Navigation("Players");

                    b.Navigation("TeamArena");
                });

            modelBuilder.Entity("Hyperar.HPA.Domain.User", b =>
                {
                    b.Navigation("Manager");

                    b.Navigation("Token");
                });
#pragma warning restore 612, 618
        }
    }
}
